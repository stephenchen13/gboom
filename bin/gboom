#!/usr/bin/env ruby
require 'gli'
require 'github_api'
require 'clipboard'
require 'gboom'

include GLI::App

program_desc 'Create Gists from your command line like a pimp.'

version GBoom::VERSION

desc "Create a Gist from an existing file. You just gboom'ed!"
arg_name '[path to file] [start_line] [end_line]'
command :add do |c|
  c.desc 'Use this flag to hide your embarassing code. Refactor that shit.'
  c.arg_name 'public'
  c.default_value false
  c.switch [:p, :public]

  c.desc 'What the fuck is happening in this gist?'
  c.arg_name 'description'
  c.default_value ''
  c.flag :d

  c.desc ''
  c.arg_name 'lines'
  c.default_value ''
  c.flag [:l, :lines]

  c.action do |global_options,options,args|
    begin
      file = args[0]
      start_line = args[1].to_i
      end_line = args[2].to_i

      if file && !file.empty?
        content = File.open(file, 'r') {|f| f.read}
        file_name = File.basename(file)
      else
        content = ARGF.read
        file_name = 'stdin'
      end

      start_line = start_line == 0 ? 1 : start_line
      end_line = end_line > 0 ? end_line : content.lines.count

      raise "Is your shit backwards?" if start_line > end_line
      raise "Start at 1 buddy." if start_line == 0 && end_line > 0
      content = content.lines.to_a.slice(start_line-1, end_line-start_line+1).join
    rescue Exception => e
      raise "#{e}. Unable to read file. Dude, you're fucking this up."
    end

    # grab credentials from env or global gitfile
    env_username = ENV['GITHUB_USERNAME']
    env_password = ENV['GITHUB_PASSWORD']
    username = env_username.nil? || env_username.empty? ? `git config --global --get github.user` : env_username 
    password = env_password.nil? || env_password.empty? ? `git config --global --get github.password` : env_password

    raise "You probably didn't read the instructions did you? You can't just skip to the good stuff, setup your github credentials. Noob." if username.empty? || password.empty?

    if password[0].chr == '!'
      command = password[1, password.length]
      password = `#{command}`
    end

    github = Github.new :basic_auth => "#{username.strip}:#{password.strip}"
    github.oauth.create 'scopes' => ['gist']

    begin
      resp = github.gists.create(
        'description' => options[:d],
        'public' => options[:p],
        'files' => {
          file_name => {
            'content' => content 
          }
        }
      )
    rescue Github::Error::GithubError => e
      raise e.message
    end

    Clipboard.copy("https://gist.github.com/#{resp[:id]}")
    puts "GBoom! Copied https://gist.github.com/#{resp[:id]} to your clipboard!"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
